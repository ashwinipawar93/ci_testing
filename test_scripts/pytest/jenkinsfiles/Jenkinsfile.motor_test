@NonCPS
def hostnames(label) {
  def nodes = []
  jenkins.model.Jenkins.instance.computers.each { c ->
    if (c.node.labelString.contains(label)) {
      nodes.add(c.node.selfLabel.name)
    }
  }
  return nodes
}

def nodes = hostnames("${label}")
def last_log_timestamp = ""

pipeline {
  agent { label "master" }
  options {
    timestamps()
    timeout(time: 120, unit: 'MINUTES')
  }
  environment {
    IMAGE_NAME = "test_Container"
    IMAGE_TAG  = "latest"
    TEST_DIRECTORY  = "motor_test"
    CASES_PATH = "test_scripts/pytest"
    XML_RESULT_PATH = "${CASES_PATH}/result.xml"
    CONTAINER_NAME   = UUID.randomUUID().toString()
  }

  stages {
    stage ("Cleanup") {
      steps {
          sh "rm -rf ./*"
      }
    }
    stage ("Running on slave") {
      steps {
        script {
          for (int i = 0; i < nodes.size(); i++) {
            node("${nodes[i]}") {

              stage ('Git checkout'){
                checkout scm
              }
              stage ('Run Tests') {
                script {
                  TESTS_PATH  = "${env.WORKSPACE}/${CASES_PATH}/"
                  DOCS_PATH = "${env.WORKSPACE}/${DOC_PATH}/"
                  withCredentials([string(credentialsId: "github_token", variable: 'GITHUB_TOKEN')]) {
                    try {
                      test_container.run("python3 -m pytest ${TEST_DIRECTORY} --junitxml=result.xml ",\
                                         "${TESTS_PATH}", "${CONTAINER_NAME}")
                    } finally {
                      try {
                        junit "${XML_RESULT_PATH}"
                      }
                      finally {
                        test_container.stop("${CONTAINER_NAME}")
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
